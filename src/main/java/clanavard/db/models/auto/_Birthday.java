package clanavard.db.models.auto;

import java.io.IOException;
import java.io.ObjectInputStream;
import java.io.ObjectOutputStream;

import org.apache.cayenne.BaseDataObject;
import org.apache.cayenne.exp.Property;

/**
 * Class _Birthday was generated by Cayenne.
 * It is probably a good idea to avoid changing this class manually,
 * since it may be overwritten next time code is regenerated.
 * If you need to make any customizations, please use subclass.
 */
@SuppressWarnings("deprecation")
public abstract class _Birthday extends BaseDataObject {

    private static final long serialVersionUID = 1L; 

    public static final String ID_PK_COLUMN = "id";

		public static final Property<String> BIRTHDAY = Property.create("birthday", String.class);
    public static final Property<String> USER_ID = Property.create("userId", String.class);

    protected String birthday;
    protected String userId;


    public void setBirthday(String birthday) {
        beforePropertyWrite("birthday", this.birthday, birthday);
        this.birthday = birthday;
    }

    public String getBirthday() {
        beforePropertyRead("birthday");
        return this.birthday;
    }

    public void setUserId(String userId) {
        beforePropertyWrite("userId", this.userId, userId);
        this.userId = userId;
    }

    public String getUserId() {
        beforePropertyRead("userId");
        return this.userId;
    }

    @Override
    public Object readPropertyDirectly(String propName) {
        if(propName == null) {
            throw new IllegalArgumentException();
        }

        switch(propName) {
            case "birthday":
                return this.birthday;
            case "userId":
                return this.userId;
            default:
                return super.readPropertyDirectly(propName);
        }
    }

    @Override
    public void writePropertyDirectly(String propName, Object val) {
        if(propName == null) {
            throw new IllegalArgumentException();
        }

        switch (propName) {
            case "birthday":
                this.birthday = (String)val;
                break;
            case "userId":
                this.userId = (String)val;
                break;
            default:
                super.writePropertyDirectly(propName, val);
        }
    }

    private void writeObject(ObjectOutputStream out) throws IOException {
        writeSerialized(out);
    }

    private void readObject(ObjectInputStream in) throws IOException, ClassNotFoundException {
        readSerialized(in);
    }

    @Override
    protected void writeState(ObjectOutputStream out) throws IOException {
        super.writeState(out);
        out.writeObject(this.birthday);
        out.writeObject(this.userId);
    }

    @Override
    protected void readState(ObjectInputStream in) throws IOException, ClassNotFoundException {
        super.readState(in);
        this.birthday = (String)in.readObject();
        this.userId = (String)in.readObject();
    }

}
